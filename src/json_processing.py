"""
 json_processing.py

  Created by Julien Zouein on 10/11/2023.
  Copyright © 2023 Sigmedia.tv. All rights reserved.
  Copyright © 2023 Julien Zouein (zoueinj@tcd.ie)
----------------------------------------------------------------------------

Define all the functions needed to process the json files generated by AOM inspection tool.
"""
from typing import Tuple

import cv2
import numpy as np

import json


def read_json_file(json_file: str) -> dict:
    """
    Read the json file and return the dictionary containing the data
    :param json_file: json file to read
    :return: dictionary containing the data
    """
    with open(json_file, "r") as file:
        data = json.loads(file.read())
    return data


def get_frame_data(data: dict, frame_number: int) -> dict:
    """
    Get the data of a specific frame
    :param data: dictionary containing the data
    :param frame_number: frame number
    :return: dictionary containing the data of the frame
    """
    return data[frame_number]


def get_frame_motion_vectors(frame_data: dict) -> Tuple[np.ndarray, np.ndarray]:
    """
    Get the motion vector map of a specific frame and the motion intensity map.
    :param frame_data: dictionary containing the data of the frame
    :return: a 2-channels numpy array creating the vector motion field
    :return: a greyscale numpy array displaying the intensity of the motion
    """

    motion_vectors = frame_data["motionVectors"]
    h = len(motion_vectors)
    w = len(motion_vectors[0])

    # Create the numpy array
    motion_field = np.zeros((h*4, w*4, 2), dtype=np.float32)

    for i in range(0, h-1):
        for j in range(0, w-1):

            vector_h = (motion_vectors[i][j][0])/8
            vector_w = (motion_vectors[i][j][1])/8

            motion_field[i*4:(i+1)*4, j*4:(j+1)*4, 0] = vector_h
            motion_field[i*4:(i+1)*4, j*4:(j+1)*4, 1] = vector_w

    h = len(motion_vectors)
    w = len(motion_vectors[0])

    result = np.zeros((h*4, w*4, 2), dtype=np.float32)
    intensity = np.zeros((h*4, w*4, 3), dtype=np.float32)

    for i in range(0, h-1):
        for j in range(0, w-1):

            vector_h = (motion_vectors[i][j][0])/8
            vector_w = (motion_vectors[i][j][1])/8

            result[i*4:(i+1)*4, j*4:(j+1)*4, 0] = vector_w
            result[i*4:(i+1)*4, j*4:(j+1)*4, 1] = vector_h

            intensity[i*4:(i+1)*4, j*4:(j+1)*4] = (vector_w + vector_h)/2

    intensity = intensity*255
    intensity = intensity.astype(np.uint8)

    return result, intensity


def get_frame_reference(frame_data: dict) -> np.ndarray:
    """Get the reference frames used for each block in a specific frame

    :param frame_data: dictionary containing the data of the frame
    :return: numpy array containing the reference frame
    """
    reference_frames = frame_data["referenceFrame"]

    h = len(reference_frames)
    w = len(reference_frames[0])

    result = np.zeros((h*4, w*4, 1), dtype=np.float32)

    for i in range(0, h-1):
        for j in range(0, w-1):

            result[i*4:(i+1)*4, j*4:(j+1)*4, 0] = reference_frames[i][j][0]/7

    return result
